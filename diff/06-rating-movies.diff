diff --git a/package-lock.json b/package-lock.json
index 3f9afa7..f5ad303 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -15,23 +15,7 @@
         "express": "^4.17.1",
         "express-session": "^1.17.3",
         "jsonwebtoken": "^8.5.1",
-<<<<<<< HEAD
-<<<<<<< HEAD
-<<<<<<< HEAD
-<<<<<<< HEAD
         "neo4j-driver": "^4.4.10",
-=======
-        "neo4j-driver": "^5.1.0",
->>>>>>> 8c8bfba (Use 5.0 drivers)
-=======
-        "neo4j-driver": "^4.4.10",
->>>>>>> ce13aea (Completed challenge: Adding the Driver.  Imported neo4j dependency and initialized driver variable.)
-=======
-        "neo4j-driver": "^5.1.0",
->>>>>>> 8c8bfba (Use 5.0 drivers)
-=======
-        "neo4j-driver": "^4.4.10",
->>>>>>> ce13aea (Completed challenge: Adding the Driver.  Imported neo4j dependency and initialized driver variable.)
         "passport": "^0.6.0",
         "passport-anonymous": "^1.0.1",
         "passport-jwt": "^4.0.0",
diff --git a/src/services/rating.service.js b/src/services/rating.service.js
index 06a3610..8c481ab 100644
--- a/src/services/rating.service.js
+++ b/src/services/rating.service.js
@@ -1,5 +1,6 @@
 import { goodfellas } from '../../test/fixtures/movies.js'
 import { ratings } from '../../test/fixtures/ratings.js'
+import { int } from 'neo4j-driver'
 import NotFoundError from '../errors/not-found.error.js'
 import { toNativeTypes } from '../utils.js'
 
@@ -59,11 +60,56 @@ export default class ReviewService {
    */
   // tag::add[]
   async add(userId, movieId, rating) {
-    // TODO: Convert the native integer into a Neo4j Integer
-    // TODO: Save the rating in the database
-    // TODO: Return movie details and a rating
+    // tag::convert[]
+    // Convert the native integer into a Neo4j Integer
+    rating = int(rating)
+    // end::convert[]
 
-    return goodfellas
+    // tag::write[]
+    // Save the rating to the database
+
+    // Open a new session
+    const session = this.driver.session()
+
+    // Save the rating in the database
+    const res = await session.executeWrite(
+      tx => tx.run(
+        `
+          MATCH (u:User {userId: $userId})
+          MATCH (m:Movie {tmdbId: $movieId})
+
+          MERGE (u)-[r:RATED]->(m)
+          SET r.rating = $rating,
+              r.timestamp = timestamp()
+
+          RETURN m {
+            .*,
+            rating: r.rating
+          } AS movie
+        `,
+        { userId, movieId, rating, }
+      )
+    )
+
+    await session.close()
+    // end::write[]
+
+    // tag::throw[]
+    // Check User and Movie exist
+    if ( res.records.length === 0 ) {
+      throw new NotFoundError(
+        `Could not create rating for Movie ${movieId} by User ${userId}`
+      )
+    }
+    // end::throw[]
+
+    // tag::addreturn[]
+    // Return movie details and rating
+    const [ first ] = res.records
+    const movie = first.get('movie')
+
+    return toNativeTypes(movie)
+    // end::addreturn[]
   }
   // end::add[]
 
