diff --git a/src/services/favorite.service.js b/src/services/favorite.service.js
index 18e8cfb..6ec0849 100644
--- a/src/services/favorite.service.js
+++ b/src/services/favorite.service.js
@@ -1,9 +1,6 @@
 import NotFoundError from '../errors/not-found.error.js'
 import { toNativeTypes } from '../utils.js'
-
-// TODO: Import the `int` function from neo4j-driver
-
-import { goodfellas, popular } from '../../test/fixtures/movies.js'
+import { int } from 'neo4j-driver'
 
 export default class FavoriteService {
   /**
@@ -40,11 +37,30 @@ export default class FavoriteService {
    */
   // tag::all[]
   async all(userId, sort = 'title', order = 'ASC', limit = 6, skip = 0) {
-    // TODO: Open a new session
-    // TODO: Retrieve a list of movies favorited by the user
-    // TODO: Close session
+    // Open a new session
+    const session = await this.driver.session()
+
+    // Retrieve a list of movies favorited by the user
+    const res = await session.executeRead(
+      tx => tx.run(
+        `
+          MATCH (u:User {userId: $userId})-[:HAS_FAVORITE]->(m:Movie)
+          RETURN m {
+            .*,
+            favorite: true
+          } AS movie
+          ORDER BY m.\`${sort}\` ${order}
+          SKIP $skip
+          LIMIT $limit
+        `,
+        { userId, skip: int(skip), limit: int(limit) }
+      )
+    )
 
-    return popular
+    // Close session
+    await session.close()
+
+    return res.records.map(row => toNativeTypes(row.get('movie')))
   }
   // end::all[]
 
@@ -61,15 +77,49 @@ export default class FavoriteService {
    */
   // tag::add[]
   async add(userId, movieId) {
-    // TODO: Open a new Session
-    // TODO: Create HAS_FAVORITE relationship within a Write Transaction
-    // TODO: Close the session
-    // TODO: Return movie details and `favorite` property
-
-    return {
-      ...goodfellas,
-      favorite: true,
+    // Open a new Session
+    const session = this.driver.session()
+
+    // tag::create[]
+    // Create HAS_FAVORITE relationship within a Write Transaction
+    const res = await session.executeWrite(
+      tx => tx.run(
+        `
+          MATCH (u:User {userId: $userId})
+          MATCH (m:Movie {tmdbId: $movieId})
+
+          MERGE (u)-[r:HAS_FAVORITE]->(m)
+          ON CREATE SET u.createdAt = datetime()
+
+          RETURN m {
+            .*,
+            favorite: true
+          } AS movie
+        `,
+        { userId, movieId, }
+      )
+    )
+    // end::create[]
+
+    // tag::throw[]
+    // Throw an error if the user or movie could not be found
+    if ( res.records.length === 0 ) {
+      throw new NotFoundError(
+        `Could not create favorite relationship between User ${userId} and Movie ${movieId}`
+      )
     }
+    // end::throw[]
+
+    // Close the session
+    await session.close()
+
+    // tag::return[]
+    // Return movie details and `favorite` property
+    const [ first ] = res.records
+    const movie = first.get('movie')
+
+    return toNativeTypes(movie)
+    // end::return[]
   }
   // end::add[]
 
@@ -87,15 +137,41 @@ export default class FavoriteService {
    */
   // tag::remove[]
   async remove(userId, movieId) {
-    // TODO: Open a new Session
-    // TODO: Delete the HAS_FAVORITE relationship within a Write Transaction
-    // TODO: Close the session
-    // TODO: Return movie details and `favorite` property
-
-    return {
-      ...goodfellas,
-      favorite: false,
+    // Open a new Session
+    const session = this.driver.session()
+
+    // Create HAS_FAVORITE relationship within a Write Transaction
+    const res = await session.executeWrite(
+      tx => tx.run(
+        `
+          MATCH (u:User {userId: $userId})-[r:HAS_FAVORITE]->(m:Movie {tmdbId: $movieId})
+
+          DELETE r
+
+          RETURN m {
+            .*,
+            favorite: false
+          } AS movie
+        `,
+        { userId, movieId, }
+      )
+    )
+
+    // Throw an error if the user or movie could not be found
+    if ( res.records.length === 0 ) {
+      throw new NotFoundError(
+        `Could not remove favorite relationship between User ${userId} and Movie ${movieId}`
+      )
     }
+
+    // Close the session
+    await session.close()
+
+    // Return movie details and `favorite` property
+    const [ first ] = res.records
+    const movie = first.get('movie')
+
+    return toNativeTypes(movie)
   }
   // end::remove[]
 
diff --git a/src/services/rating.service.js b/src/services/rating.service.js
index 8c481ab..2adb82f 100644
--- a/src/services/rating.service.js
+++ b/src/services/rating.service.js
@@ -60,6 +60,7 @@ export default class ReviewService {
    */
   // tag::add[]
   async add(userId, movieId, rating) {
+<<<<<<< HEAD
     // tag::convert[]
     // Convert the native integer into a Neo4j Integer
     rating = int(rating)
@@ -68,6 +69,11 @@ export default class ReviewService {
     // tag::write[]
     // Save the rating to the database
 
+=======
+    // Convert the native integer into a Neo4j Integer
+    rating = int(rating)
+
+>>>>>>> c4b72e6 (Completed challenge: Rating Movies. Create a (:User)-[:RATED]->(:Movie) relationship with a .rating property)
     // Open a new session
     const session = this.driver.session()
 
